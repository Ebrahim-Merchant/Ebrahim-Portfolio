{"version":3,"sources":["shared/components/display-name/display-name.component.tsx","pages/landing-page/landing-page.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DisplayName","props","state","getClass","bind","isTransparent","this","name","subtitle","mediaListItems","info","className","map","mediaElement","index","key","iconName","href","link","label","Component","LandingPage","handleScroll","handleAnimateToRef","window","addEventListener","passive","document","documentElement","scrollTop","innerHeight","scrollY","body","offsetHeight","setState","event","id","inputData","App","path","component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4WAgBqBA,G,kBAEnB,WAAYC,GAAoB,IAAD,8BAC7B,4CAAMA,KAFRC,MAAQ,GAGN,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAFa,E,sEAKtBC,GACH,MAAO,iB,+BAGH,IAAD,EACyDC,KAAKL,MAA7DM,EADD,EACCA,KAAMF,EADP,EACOA,cAAeG,EADtB,EACsBA,SAAgBC,GADtC,EACgCC,KADhC,EACsCD,gBAC7C,OACE,yBAAKE,UAAWL,KAAKH,SAASE,IAC5B,wBAAIM,UAAU,QAAQJ,GACtB,uBAAGI,UAAU,YAAYH,GACvB,wBAAIG,UAAU,cACXF,EAAeG,KAAI,SAACC,EAAaC,GAAd,OAClB,wBAAIC,IAAKD,GACP,uBACEH,UAAW,QAASE,EAAaG,SACjCC,KAAMJ,EAAaK,MAErB,0BAAMP,UAAU,SAASE,EAAaM,kB,GAxBbC,c,OCFpBC,G,wBACnB,WAAYpB,GAAe,IAAD,8BACxB,4CAAMA,KACDqB,aAAe,EAAKA,aAAalB,KAAlB,gBACpB,EAAKmB,mBAAqB,EAAKA,mBAAmBnB,KAAxB,gBAC1B,EAAKF,MAAQ,CACXG,eAAe,GALO,E,iFAUxBmB,OAAOC,iBAAiB,SAAUnB,KAAKgB,aAAc,CAAEI,SAAS,M,qCAI/CC,SAASC,gBAAgBC,UAGxCL,OAAOM,YAAcN,OAAOO,SAC5BJ,SAASK,KAAKC,aAAe,GAE7B3B,KAAK4B,SAAS,CAAE7B,eAAe,IAE/BC,KAAK4B,SAAS,CAAE7B,eAAe,M,yCAIhB8B,M,+BAGjB,OACE,yBAAKC,GAAG,OAAOzB,UAAU,wBACrB,yBAAKyB,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,WACV,yBAAKzB,UAAU,gBACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACEN,cAAeC,KAAKJ,MAAMG,cAC1BK,KAAM2B,IACN9B,KAAM8B,IACN7B,SAAU6B,IACV5B,eAAgB4B,Y,GA3CajB,cCD1BkB,EARO,WACpB,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWnB,MCIfoB,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASoB,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d3ce4caa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./display-name.component.scss\";\r\nimport { DisplayPage } from \"../../models/display-page.props\";\r\n\r\n\r\ninterface State {}\r\n\r\n/**\r\n * @props name - string,\r\n *        subtitle - string,\r\n *        mediaListItems - SocialMediaItems[]\r\n *\r\n * @export\r\n * @class DisplayName\r\n * @extends {Component<DisplayPage, State>}\r\n */\r\nexport default class DisplayName extends Component<DisplayPage, State> {\r\n  state = {};\r\n  constructor(props: DisplayPage){\r\n    super(props);\r\n    this.getClass = this.getClass.bind(this);\r\n  }\r\n\r\n  getClass(isTransparent: boolean | undefined): string{\r\n        return \"display-name\"\r\n  }\r\n\r\n  render() {\r\n    const { name, isTransparent, subtitle, info, mediaListItems } = this.props;\r\n    return (\r\n      <div className={this.getClass(isTransparent)}>\r\n        <h1 className=\"name\">{name}</h1>\r\n        <p className=\"subtitle\">{subtitle}</p>\r\n          <ul className=\"media-list\">\r\n            {mediaListItems.map((mediaElement,index) => (\r\n              <li key={index}>\r\n                <a\r\n                  className={'icon '+ mediaElement.iconName}\r\n                  href={mediaElement.link}\r\n                >\r\n                <span className=\"label\">{mediaElement.label}</span>\r\n                </a>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport DisplayName from \"../../shared/components/display-name/display-name.component\";\r\nimport * as inputData from \"../../conf.json\";\r\nimport NavBar from \"../../shared/components/navbar/navbar.component\";\r\nimport \"./landing-page.component.scss\";\r\nimport \"./stars.scss\";\r\nimport ProjectStrip from \"../../shared/components/project-strip/project-strip.component\";\r\nimport AboutSection from \"./sections/about/about.component\";\r\n\r\ninterface Props {}\r\ninterface State {\r\n  isTransparent: boolean;\r\n}\r\n\r\nexport default class LandingPage extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.handleScroll = this.handleScroll.bind(this);\r\n    this.handleAnimateToRef = this.handleAnimateToRef.bind(this);\r\n    this.state = {\r\n      isTransparent: true\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"scroll\", this.handleScroll, { passive: true });\r\n  }\r\n\r\n  handleScroll() {\r\n    const position = document.documentElement.scrollTop;\r\n\r\n    if (\r\n      window.innerHeight + window.scrollY >=\r\n      document.body.offsetHeight - 80\r\n    ) {\r\n      this.setState({ isTransparent: false });\r\n    } else {\r\n      this.setState({ isTransparent: true });\r\n    }\r\n  }\r\n\r\n  handleAnimateToRef(event: any) {}\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"home\" className=\"home container-stars\">\r\n          <div id=\"stars\"></div>\r\n          <div id=\"stars2\"></div>\r\n          <div id=\"stars3\"></div>\r\n        <div className=\"landing-page\">\r\n        <div className=\"sun\"></div>\r\n        <div className=\"light\"></div>\r\n          <DisplayName\r\n            isTransparent={this.state.isTransparent}\r\n            info={inputData.info}\r\n            name={inputData.name}\r\n            subtitle={inputData.subtitle}\r\n            mediaListItems={inputData.mediaListItems}\r\n          />\r\n\r\n          \r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\r\nimport LandingPage from \"./pages/landing-page/landing-page.component\";\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n      <Router>\r\n        <Route path=\"/\" component={LandingPage} />\r\n        </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}